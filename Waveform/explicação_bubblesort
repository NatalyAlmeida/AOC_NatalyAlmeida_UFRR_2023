--A ideia básica do algoritmo é realizar a troca de elementos em posições adjacentes (um ao lado do outro), de modo que os elementos com maior
  valor sejam posicionados no final do vetor (array) e os com menor valor sejam posicionados no início do vetor--
  Abaixo vemos a implementação dp Algoritmo:
                                                                                     -- Observações                
                                                                             linha 2-17: funções de impressão, são utilizadas para exibir
                                                                             na tela o conteúdo do vetor tanto antes quanto depois de 
                                                                              ser ordenado. Em outras palavras, essas funções têm a finalida
                                                                              de de mostrar a disposição dos elementos no vetor antes e 
                                                                              depois do processo de ordenação.
              Opcode - R1 - R2 - Funct - Instrução
01 jim main ; 10001 00000010001 1000100000010001                               linha 18-34: vetor preenchido            
02 prt1 : movi $t1 , 0; 11010 1101 0000 001 1101011010000001                   linha 36-57: o proprio algoritmo, sua ordenação
03 lpn1 : equ $t1 , $s1 ; 01000 1101 0101 000 0100011010101000
04 jimbt bck1 ; 10100 00000100000 1010000000100000
05 move $t3 , $s0 ; 11010 1111 0100 000 1101011110100000
06 add $t3 , $t1 ; 00000 1111 1101 000 0000011111101000
07 ldr $s7 , $t3 ; 10110 1011 1111 000 1011010111111000
08 addi $t1 , 1; 00001 1101 0001 000 0000111010001000
09 jim lpn1 ; 10001 11111111010 1000111111111010
10 prt2 : movi $t1 , 0; 11010 1101 0000 001 1101011010000001
11 lpn2 : equ $t1 , $s1 ; 01000 1101 0101 000 0100011010101000
12 jimbt bck2 ; 10100 00000101110 1010000000101110
13 move $t3 , $s0 ; 11010 1111 0100 000 1101011110100000
14 add $t3 , $t1 ; 00000 1111 1101 000 0000011111101000
15 ldr $s7 , $t3 ; 10110 1011 1111 000 1011010111111000
16 addi $t1 , 1; 00001 1101 0001 000 0000111010001000
17 jim lpn2 ; 10001 11111111010 1000111111111010
18 main : movi $s0 , 0; 11010 0100 0000 001 1101001000000001
19 movi $s1 , 5; 11010 0101 0101 001 1101001010101001
20 move $t0 , $s0 ; 11010 1100 0100 000 1101011000100000
21 movi $t1 , 5; 11010 1101 0101 001 1101011010101001
22 str $t1 , $t0 ; 11000 1101 1100 000 1100011011100000
23 addi $t0 , 1; 00001 1100 0001 000 0000111000001000
24 movi $t1 , 3; 11010 1101 0011 001 1101011010011001
25 str $t1 , $t0 ; 11000 1101 1100 000 1100011011100000
26 addi $t0 , 1; 00001 1100 0001 000 0000111000001000
27 movi $t1 , 9; 11010 1101 1001 001 1101011011001001
28 str $t1 , $t0 ; 11000 1101 1100 000 1100011011100000
29 addi $t0 , 1; 00001 1100 0001 000 0000111000001000
30 movi $t1 , 7; 11010 1101 0111 001 1101011010111001
31 str $t1 , $t0 ; 11000 1101 1100 000 1100011011100000
32 addi $t0 , 1; 00001 1100 0001 000 0000111000001000
33 movi $t1 , 1; 11010 1101 0001 001 1101011010001001
34 str $t1 , $t0 ; 11000 1101 1100 000 1100011011100000
35 jim prt1 ; 10001 11111011111 1000111111011111
36 bck1 : movi $t0 , 0; 11010 1100 0000 001 1101011000000001
37 move $t1 , $s1 ; 11010 1101 0101 000 1101011010101000
38 subi $t1 , 1; 00001 1101 0001 001 0000111010001001
39 lpn3 : movi $t2 , 0; 11010 1110 0000 001 1101011100000001
40 move $t3 , $t1 ; 11010 1111 1101 000 1101011111101000
41 sub $t3 , $t0 ; 00000 1111 1100 001 0000011111100001
42 lpn4 : move $s2 , $s0 ; 11010 0110 0100 000 1101001100100000
43 add $s2 , $t2 ; 00000 0110 1110 000 0000001101110000
44 ldr $s7 , $s2 ; 10110 1011 0110 000 1011010110110000
45 addi $s2 , 1; 00001 0110 0001 000 0000101100001000
46 ldr $s6 , $s2 ; 10110 1010 0110 000 1011010100110000
47 sma $s6 , $s7 ; 01010 1010 1011 000 0101010101011000
48 jimbf nswp ; 10101 00000000100 1010100000000100
49 str $s7 , $s2 ; 11000 1011 0110 000 1100010110110000
50 subi $s2 , 1; 00001 0110 0001 001 0000101100001001
51 str $s6 , $s2 ; 11000 1010 0110 000 1100010100110000
52 nswp : addi $t2 , 1; 00001 1110 0001 000 0000111100001000
53 sma $t2 , $t3 ; 01010 1110 1111 000 0101011101111000
54 jimbt lpn4 ; 10100 11111110100 1010011111110100
55 addi $t0 , 1; 00001 1100 0001 000 0000111000001000
56 sma $t0 , $t1 ; 01010 1100 1101 000 0101011001101000
57 jimbt lpn3 ; 10100 11111101110 1010011111101110
58 jim prt2 ; 10001 11111010000 1000111111010000

No waveform nao é diferente, o algoritmo se mostra nas imagens e colocando tanto sob 0 a 30 ns quanto no intervalo de 90 a 120ns.
